openapi: 3.0.1
info:
  title: Rest API Application
  description: Demo project
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: local
tags:
  - name: User
    description: User API
  - name: Account
    description: Account API
  - name: Phone
    description: Phone API
  - name: Email
    description: Email API
paths:
  #  <------------- USER ------------->
  /api/v1/users/all:
    get:
      summary: Get users list
      operationId: findAllUsers
      tags:
        - User
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
  /api/v1/users/{id}:
    get:
      summary: Get User by id
      operationId: findUserById
      parameters:
        - name: id
          in: path
          required: true
          description: User identifier
          schema:
            type: integer
            format: int64
      tags:
        - User
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFullResponse"
    delete:
      summary: Delete user by id
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          required: true
          description: User identifier
          schema:
            type: integer
            format: int64
      tags:
        - User
      responses:
        '200':
          description: success
  /api/v1/users/create:
    post:
      tags:
        - User
      summary: create new user
      operationId: createUser
      parameters:
        - name: user
          in: query
          schema:
            $ref: '#/components/schemas/UserRequest'
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserFullResponse'
  /api/v1/users/update/{id}:
    put:
      tags:
        - User
      summary: update user by id
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: user
          in: query
          schema:
            $ref: '#/components/schemas/UserRequest'
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserFullResponse'
  #  <------------- END USER ------------->

  #  <------------- ACCOUNT ------------->
  /api/v1/accounts/all:
    get:
      summary: Get accounts list
      operationId: findAllAccounts
      tags:
        - Account
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Accounts"
  /api/v1/accounts/{id}:
    get:
      summary: Get Account by id
      operationId: findAccountById
      parameters:
        - name: id
          in: path
          required: true
          description: Account identifier
          schema:
            type: integer
            format: int64
      tags:
        - Account
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponse"
    delete:
      summary: Delete user by id
      operationId: deleteAccountById
      parameters:
        - name: id
          in: path
          required: true
          description: Account identifier
          schema:
            type: integer
            format: int64
      tags:
        - Account
      responses:
        '200':
          description: success
  /api/v1/accounts/create/{userId}:
    post:
      tags:
        - Account
      summary: create a new account for a user
      operationId: createAccount
      parameters:
        - name: userId
          in: path
          required: true
          description: User identifier
          schema:
            type: integer
            format: int64
        - name: account
          in: query
          schema:
            $ref: '#/components/schemas/AccountRequest'
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/AccountResponse'
  /api/v1/accounts/update/{id}:
    put:
      tags:
        - Account
      summary: update account by id
      operationId: updateAccount
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: account
          in: query
          schema:
            $ref: '#/components/schemas/AccountRequest'
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/AccountResponse'
  #  <------------- END ACCOUNT ------------->

  #  <------------- EMAIL ------------->
  /api/v1/emails/all:
    get:
      summary: Get email list
      operationId: findAllEmails
      tags:
        - Email
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Emails"
  /api/v1/emails/{id}:
    get:
      summary: Get email by id
      operationId: findEmailById
      parameters:
        - name: id
          in: path
          required: true
          description: email identifier
          schema:
            type: integer
            format: int64
      tags:
        - Email
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailResponse"
    delete:
      summary: Delete email by id
      operationId: deleteEmailById
      parameters:
        - name: id
          in: path
          required: true
          description: Email identifier
          schema:
            type: integer
            format: int64
      tags:
        - Email
      responses:
        '200':
          description: success
  /api/v1/emails/create/{userId}:
    post:
      tags:
        - Email
      summary: create a new email for a user
      operationId: createEmail
      parameters:
        - name: userId
          in: path
          required: true
          description: Email identifier
          schema:
            type: integer
            format: int64
        - name: email
          in: query
          schema:
            $ref: '#/components/schemas/EmailRequest'
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/EmailResponse'
  /api/v1/emails/update/{id}:
    put:
      tags:
        - Email
      summary: update email by id
      operationId: updateEmail
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: email
          in: query
          schema:
            $ref: '#/components/schemas/EmailRequest'
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/EmailResponse'
  #  <------------- END EMAIL ------------->

  #  <------------- PHONE ------------->
  /api/v1/phones/all:
    get:
      summary: Get phones list
      operationId: findAllPhones
      tags:
        - Phone
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Phones"
  /api/v1/phones/{id}:
    get:
      summary: Get phone by id
      operationId: findPhoneById
      parameters:
        - name: id
          in: path
          required: true
          description: phone identifier
          schema:
            type: integer
            format: int64
      tags:
        - Phone
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhoneResponse"
    delete:
      summary: Delete phone by id
      operationId: deletePhoneById
      parameters:
        - name: id
          in: path
          required: true
          description: Phone identifier
          schema:
            type: integer
            format: int64
      tags:
        - Phone
      responses:
        '200':
          description: success
  /api/v1/phones/create/{userId}:
    post:
      tags:
        - Phone
      summary: create a new phone for a user
      operationId: createPhone
      parameters:
        - name: userId
          in: path
          required: true
          description: User identifier
          schema:
            type: integer
            format: int64
        - name: phone
          in: query
          schema:
            $ref: '#/components/schemas/PhoneRequest'
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PhoneResponse'
  /api/v1/phones/update/{id}:
    put:
      tags:
        - Phone
      summary: update phone by id
      operationId: updatePhone
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: phone
          in: query
          schema:
            $ref: '#/components/schemas/PhoneRequest'
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PhoneResponse'

components:
  schemas:
    #  <------------- USER ------------->
    UserRequest:
      type: object
      required:
        - firstName
        - lasName
      properties:
        firstName:
          type: string
        lastName:
          type: string
        age:
          type: integer
          format: int32
        gender:
          type: string
          enum:
            - male
            - female
        email:
          type: string
    UserFullResponse:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        name:
          type: string
        age:
          type: integer
          format: int32
        gender:
          type: string
          enum:
            - male
            - female
        email:
          type: string
        account:
          $ref: '#/components/schemas/AccountResponse'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/PhoneResponse'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/EmailResponse'
        department:
          $ref: '#/components/schemas/DepartmentResponse'
    UserShortResponse:
      type: object
      properties:
        user_id:
          type: integer
        name:
          type: string
        age:
          type: integer
          format: int32
        gender:
          type: string
          enum:
            - male
            - female
        email:
          type: string
    Users:
      type: array
      items:
        $ref: "#/components/schemas/UserShortResponse"

    #  <------------- ACCOUNT ------------->

    AccountRequest:
      type: object
      properties:
        availableBalance:
          type: number

    AccountResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        balance:
          type: number
        user:
          $ref: '#/components/schemas/UserShortResponse'

    Accounts:
      type: array
      items:
        $ref: "#/components/schemas/AccountResponse"

    #  <------------- EMAIL ------------->
    EmailRequest:
      type: object
      properties:
        email:
          type: string
    EmailResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        value:
          type: string
        user:
          $ref: '#/components/schemas/UserShortResponse'

    Emails:
      type: array
      items:
        $ref: "#/components/schemas/EmailResponse"

    #  <------------- PHONE ------------->

    PhoneRequest:
      type: object
      properties:
        email:
          type: string
    PhoneResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        value:
          type: string
        user:
          $ref: '#/components/schemas/UserShortResponse'
    Phones:
      type: array
      items:
        $ref: "#/components/schemas/PhoneResponse"

    #  <------------- DEPARTMENT ------------->
    DepartmentRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    DepartmentResponse:
      type: object
      properties:
        department_id:
          type: string
        name:
          type: string